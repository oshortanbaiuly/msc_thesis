# -*- coding: utf-8 -*-
"""appendix_d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r019nE00oxXE-BkOzGZFEhtPBqCw1zFR
"""

def value_array_creater(terminal_time):
  min_vals = [] # array to store J(0, x0) value for each number of iterations n

  for N in range(1, 201):
    x_0 = 1 # initial state
    t_0 = 0 # initial time
    T = terminal_time # terminal time, can be 2, 3, 4, 5
    alpha = 0.00 # risk level, can be 0, 0.25, 0.5, 0.75, 0.99

    s_array = np.array([0]) # s to be minimized in AVaR formula
    action_arr = np.array([-1, 0, 1]) # initial set of actions

    np.random.seed(41) # setting the seed for reproducibility
    random_arr = np.random.exponential(scale = 1.0, size = 6) # sample 6 points from exponential distribution with lambda = 1
    random_arr = np.array(sorted(np.round(random_arr, 2)))

    key = (t_0, x_0) # initial key
    min_value = float('inf')
    V_min = {}

    for r_a in s_array:
      V_table = simulate(x_0, t_0, T, alpha, action_arr, random_arr, N, r_a, lr = 0.99)
      tmp = V_table[key]

      if tmp < min_value:
        #if the initial value is minimum then assign the value function as the minimum
        V_min = V_table
        min_value = tmp
        s_min = r_a

    min_vals.append(min_value)
    print('(V_min[(time,state, aggr)]: min_value)', V_min)
    print('s_min: ', s_min)
    print('V_min[({}, {})]: {}'.format(t_0, x_0, min_value))

  return min_vals


# Obtaining J(0, x0) values for terminal time = 2
t = 2
min_vals2 = value_array_creater(terminal_time = t)

# Getting the minimum J(0, x0) value for terminal time = 2
np.min(min_vals2)

# Making a plot
n = np.arange(1, 201, 1) # number of iteration
plt.figure(figsize=(10,7))
plt.plot(n, min_vals2) # J(0, x0) value versus number of iteration plot
plt.title(r'$V_\min$(0,1) vs number of iterations plot for terminal time $T = {}$ for $\alpha = 0$'.format(t)) # plot title
plt.axhline(y=3.18, color='r', linestyle='--')  # Add horizontal line at y = 3.98 (the minimum J(0, x0) value for terminal time = 2)
plt.text(-10.3, 3.2, '3.18', color='red', ha='right')  # Annotate the y-axis at the level 3.98 (the minimum J(0, x0) value for terminal time = 2)
plt.xlabel('Iterations')
plt.ylabel('$V_\min$(0,1)')
plt.show()