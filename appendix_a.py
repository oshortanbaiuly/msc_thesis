# -*- coding: utf-8 -*-
"""appendix_a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gwUcGbxVand5G3g4kAcZU1OIeXpBsD3B
"""

import numpy as np
import matplotlib.pyplot as plt

# defining the range for x
x_vals = np.linspace(-1, 3, 1000)

# defining the functions for each interval
y1 = 1 - x_vals
y2 = 0.25 - 0.25*x_vals
y3 = 0*x_vals
y4 = 0.25 + 0.25*x_vals
y5 = 1 + x_vals

# defining the piecewise function giving the optimal value function
def piecewise(x):
  if x < -0.5:
    return 0.25 + 0.5*x
  elif -0.5 <= x and x < 0.5:
    return 0
  elif 0.5 <= x and x < 1.5:
    return 0.25 - 0.5*x
  else:
    return 1 - x

#vectorizing the piecewise function so that it can take numpy array as
#an input and computing the piecewise function values immediately

piecewise_vectorized = np.vectorize(piecewise)
y_piecewise = piecewise_vectorized(x_vals)

# making the plots

plt.figure(figsize = (10, 7))
plt.xlim(-1, 3)
plt.ylim(-2, 4)
plt.xlabel('$x_1$')
plt.ylabel('$\phi(a_{1})$')
plt.title('Graphs of the $\phi(a_{1})$ for $a_1$')

plt.plot(x_vals, y1, label = '$\phi(a_{1}) = 1 - x_1$')
plt.plot(x_vals, y2, label = '$\phi(a_{1}) = 0.25 - 0.5x_1$')
plt.plot(x_vals, y3, label = '$\phi(a_{1}) = 0$')
plt.plot(x_vals, y4, label = '$\phi(a_{1}) = 0.25 + 0.5x_1$')
plt.plot(x_vals, y5, label = '$\phi(a_{1}) = 1 + x_1$')
plt.plot(x_vals, y_piecewise, label = 'piecewise min', color = 'k', linestyle = '--')

plt.text(2.5, -1.5, '$\phi(a_{1}) = 1 - x_1$', fontsize = 9, verticalalignment = 'bottom')
plt.text(2, -0.75, '$\phi(a_{1}) = 0.25 - 0.5x_1$', fontsize = 9, verticalalignment = 'bottom')
plt.text(2.5, 0.1, '$\phi(a_{1}) = 0$', fontsize = 9, verticalalignment = 'bottom')
plt.text(2.4, 1.75, '$\phi(a_{1}) = 0.25 + 0.5x_1$', fontsize = 9, verticalalignment = 'bottom')
plt.text(2, 3.3, '$\phi(a_{1}) = 1 + x_1$', fontsize = 9, verticalalignment = 'bottom')

plt.axvline(0, color='black', linewidth = 0.5)
plt.axhline(0, color='black', linewidth = 0.5)
plt.grid(True)
plt.legend()

plt.show()

